{"./":{"url":"./","title":"首頁","keywords":"","body":"迪球NFT管理介面 技術文件 製作人: 蘇品瑒 指導教授: 李維聰 老師 製作時間: 2022 年 7 月 20 日 "},"src/introduction.html":{"url":"src/introduction.html","title":"前言","keywords":"","body":"前言 摘要 動機 整個介面網頁的基礎設計發想，是以 CSR(client Server Rendering) 的設計架構為一開始的出發點，前端(front-end)負責 SPA(Single Page Application) 的建置，後端(back-end)負責純API資料的傳輸串接，各司其職，以方便開發與維護，最後再應用區塊練技術於其之中。 什麼是CSR、SSR、SPA ? 目的 "},"src/building/":{"url":"src/building/","title":"技術基礎與建置","keywords":"","body":"技術基礎與建置 技術基礎 因為整體網頁系統涵蓋到區塊練的技術範圍，所以Web3.0在之中的定位就非常重要，如果界定不清的話，可能會造成不必要的性能浪費與成本浪費，於是以下列出整體開發上所需要的技術基礎，幫助開發與維護上的整體構思。 web2層 前端 : SPA單頁應用程式 框架 : React JS (函式庫) 因為後台網頁，因此不考慮UX美工設計需求 ! 後端 : Node Js伺服器 框架 : Express JS (函式庫) 因前端已負責網頁渲染，因此伺服器只單純處理API的資料串接供應 ! web3層 區塊練 : 以太坊(Ethereum)網路 框架 : Ethers Js (函式庫) 因暫時沒有撰寫智能合約的必要，因此大部分功能不必直接與區塊練交互 基本環境需求 安裝 npm (LTS Version) 點擊連結下載Node.js並安裝LTS穩定版本，npm會一起被安裝，完誠後請務必重新開機。 安裝 Vidual Studio Code (可跳過) 點擊連結下載VS Code "},"src/building/preparing.html":{"url":"src/building/preparing.html","title":"預備知識","keywords":"","body":"預備知識 React框架的概念與使用 Express框架的概念與使用 基本BlockChain的認識 以太坊(Ethereum)與智能合約 Web2.0 V.S. Web3.0 應用區塊練技術最核心的技術，莫過於他與傳統網頁之間(Web2.0)的交互問題，而現在普遍大家均把這樣的新式網頁稱為Dapp(Decentralized Application)。 基本上可以想成在傳統Web2.0架構中，前端網頁所要渲染的後台資料，通常均由一個中心化的中心運算伺服器所提供所有資料，而在Dapp概念中，反而這些後臺資料，是由區塊練這個超大分散式運算伺服器，去運算資料與提供資料。 不過事實上，現在大部分的Dapp開發，不見得是屬於真正的Web3.0，有些時後礙於一些原因，像是高昂的開發成本、資料備份需求、隱私問題或其他問題，開發上不得不使用傳統集中式伺服器去處理資料與建置資料庫，於是現在的Dapp都只是屬於Web2.5的過渡階段，前後端均可與區塊練做到交互上目的。 Dapp運作原理與資料傳輸原理 Web3 Provider與MetaMask的關係 非同值化貨幣(NFT) ? Opensea(最大NFT二級市場) NFT元數據(MetaData) "},"src/building/architecture.html":{"url":"src/building/architecture.html","title":"主要整體架構","keywords":"","body":"主要整體架構 "},"src/building/front.html":{"url":"src/building/front.html","title":"前端UI渲染建置","keywords":"","body":"前端UI渲染建置 主要概念 前端架構 模組概覽 簡易UX渲染 路由配置 數據需求 暫存數據管理 "},"src/building/back.html":{"url":"src/building/back.html","title":"後端伺服器建置","keywords":"","body":"後端伺服器建置 主要概念 後端架構 模組概覽 基本伺服器設定 數據需求 API路由配置 "},"src/building/blockchain_interact.html":{"url":"src/building/blockchain_interact.html","title":"區塊練資料交互","keywords":"","body":"區塊練資料交互 主要概念 前端架構 模組概覽 "},"src/permission.html":{"url":"src/permission.html","title":"管理者權限","keywords":"","body":"管理者權限 "},"src/flow/":{"url":"src/flow/","title":"操作流程","keywords":"","body":"操作流程 說明 以下各小節為NFT管理系統所有功能的詳細操作流程，如在操作上遇到問題，請再次瀏覽主要功能與附加功能兩個章節，兩章結均有詳細的功能解說。 "},"src/flow/login.html":{"url":"src/flow/login.html","title":"登入","keywords":"","body":"登入 "},"src/flow/wallet_connect.html":{"url":"src/flow/wallet_connect.html","title":"錢包連接","keywords":"","body":"錢包連接 "},"src/flow/mint.html":{"url":"src/flow/mint.html","title":"NFT鑄造","keywords":"","body":"NFT鑄造 "},"src/flow/airdrop.html":{"url":"src/flow/airdrop.html","title":"NFT空投","keywords":"","body":"NFT空投 "},"src/flow/owner_checker.html":{"url":"src/flow/owner_checker.html","title":"NFT持有人驗證","keywords":"","body":"NFT持有人驗證 "},"src/flow/owner_list.html":{"url":"src/flow/owner_list.html","title":"NFT持有人名單","keywords":"","body":"NFT持有人名單 "},"src/flow/logout.html":{"url":"src/flow/logout.html","title":"登出","keywords":"","body":"登出 "},"src/main_funciton/":{"url":"src/main_funciton/","title":"主要功能","keywords":"","body":"主要功能 說明 目前所有主要功能，均為測試階段，所以NFT目前也是只再Rinkeby以太坊測試網路上操作部屬，正式上線後就會切換為主網運作一切的功能操作。 解說架構 動機 概念 架構 設計方法 組件說明 存在問題 "},"src/main_funciton/wallet_connect.html":{"url":"src/main_funciton/wallet_connect.html","title":"錢包連接","keywords":"","body":"錢包連接 動機 只要與以太坊網路請求資料或寫入資料，就一定要與它搭起之間的橋樑，於是必須做出一個按鈕，可以登入自己的區塊練錢包，利用錢包取得使用此系統的操作權限，並且保持登入狀態，以利之後可能的交易簽屬。 概念 如果了解Web3 Provider的概念一定會知道(什麼是Web3 Provider ?)，這個提供者其實就是所謂的橋樑，因為區塊練網路為完全不同的結構概念，無法利用傳統的HTTP協定做之間的溝通，所以必須利用特殊的傳輸協定稱作 \" JSON-RPC \"，它是以JSON的形式去把Javescript代碼轉換成Json代碼，利用此代碼發出請求(Request)，再透過區塊練網絡專用的RPC伺服器與區塊練溝通。 不過其實在Web3 Provider還未問世前，與智能合約溝通唯一方式，是只能通過以太坊節點(json-rpc服務器)所提供的json-rpc API。而使用json-rpc不是非常容易，所以web3函式庫就提供了一系列的抽象API呼叫，只要透過這個函式庫，就能與任何以太坊結點進行交互。 然而我們只是要開發簡單的功能，所以無須自己架設我們自己的以太坊結點伺服器，我們只需透過第三方提供的免費方案，就能藉由第三方架設好的伺服器與區塊練做溝通。 架構 運作原理 圖片取自https://github.com/ethereumbook/ethereumbook/issues/376 邏輯圖 設計方法 我們因為只是要連線到我們的錢包，並且把錢包資訊運作在前端網頁上，所以唯一要做的事，就是透過函式庫產生的provider，連接到區塊練錢包，並把錢包資料儲存在網頁中。 我們選擇的函式庫為Ethers Js，它是參考了Web3 Js的設計並進行了優化改良，再開發出更為輕量直觀的函式庫。 不過事實上，因為我們沒有額外的特殊需求，所以我們選用MetaMask作為我們的錢包入口，MetaMask在瀏覽器中為第三方外掛插件，它的運作底層就已經利用Web3 Js函式庫為我們產生provider並連結至infura第三方以太坊結點了，所以在這裡我們只需要直接利用Ethers Js去連結MetaMask錢包就好了。 組件說明 存在問題 "},"src/main_funciton/nft_mint.html":{"url":"src/main_funciton/nft_mint.html","title":"NFT鑄造","keywords":"","body":"NFT鑄造 動機 要在網頁上可以鑄造NFT並不是件容易的事，其中涉及了許多以太坊代幣製作發行的技術應用，所以大致上分為三種鑄幣方法 : 外部連結至Opensea官網，在Opensea上登入錢包直接鑄造NFT。 撰寫程式製作與opensea一樣類似的作法。 額外先撰寫智能合約，部屬智能合約後，在網站上進行鑄造。 概念 不管是甚麼鑄幣方法，底層概念均為相同，只是手法的不同，所以以最為基本的NFT鑄幣方法來解說。 以下步驟為大概的鑄幣流程 : 以Solidity語言撰寫智能合約，並選擇代幣標準ERC1155(何謂ERC1155)下去編寫代幣邏輯。 把撰寫好的智能合約透過以太坊結點部屬上線至以太坊網路上。 生成NFT所需要的元數據，包括圖片URL、名字、DNA或其他。 把NFT元數據URI輸入更新至部屬好的智能合約上。 在前端網頁匯入智能合約產生的ABI編碼。 透過Web3 Js函式庫與以太坊連結。 調用ABI方法進行鑄造。 透過Web3 provider簽署交易。 完成NFT鑄造。 由上面步驟可知，之中必須先撰寫智能合約模板上線至以太坊網路，而前端需運用Web3 Js函式庫去利用合約ABI與智能合約做交互，最後才能成功鑄造出NFT，所以在使用者體驗這部分是比較需要去思考的地方。 架構 運作原理 邏輯圖 之中有加入OTP認證的機制，有關OTP認證的詳細說明請看附加功能 - 二次確認。 設計方法 由於初步設計只是要在前端網頁實現MFT鑄造的功能，所以先採用最基本的方法，先撰寫智能合約，部屬智能合約後，在網站上進行鑄造。 我們一樣選用Ethers Js函式庫進行智能合約的交互。 流程設計簡單來說，就是先在網頁上選擇要鑄造的NFT，並且輸入要鑄造的數量，最後發起交易並簽屬，等待鑄造完成提醒。 組件說明 存在問題 "},"src/main_funciton/nft_airdrop.html":{"url":"src/main_funciton/nft_airdrop.html","title":"NFT空投","keywords":"","body":"NFT空投 動機 NFT空投簡單來說，就是把鑄造好的NFT，從鑄造者錢包轉移NFT至其他欲被轉移的錢包地址，但通常來說會有很多種空投的形式，不過在這裡我們只是要單純轉移NFT給購買NFT的錢包地址而已，而實際上有兩種方法可以實現空頭 : 在前端網頁以迴圈的方式，一個一個NFT地址轉移，每次轉移均發起交易。 撰寫空投智能合約，利用此合約進行空投運作，從頭到尾只需發起一次交易。 概念 以最為基本簡單的NFT空投方法來解說，以下為NFT空投流程 : 輸入要空投的CSV名單(包含錢包地址與各別數量)。 把CSV名單轉為JSON名單。 撰寫迴圈，對JSON名單做遍歷掃描。 對每個地址透過provider進行NFT轉移，並發起交易。 依序簽屬交易，並等待區塊鏈驗證完成。 完成NFT空投。 依照上面步驟，可看出除了需了解CSV格式轉換外，NFT轉移其實做法就與NFT鑄造大同小異。 架構 運作原理 邏輯圖 之中有加入OTP認證的機制，有關OTP認證的詳細說明請看附加功能 - 二次確認。 設計方法 雖然一般Dapp中空投應該要是撰寫空投合約並一次性批量轉移，但是為了簡單實現並測試空投功能，初步設計就先以批量迴圈單一空投來製作。 而這個功能中，為了希望能快速開發並且直觀的設計，所以我們直接引入Opensea所提供的SDK函式庫，利用此函式庫來直接透過Opensea本身提供的API來調用合約，最大的好處在於無須使用Web3 Js函式庫進行繁瑣的環境建置。 組件說明 存在問題 "},"src/main_funciton/nft_owner_checker.html":{"url":"src/main_funciton/nft_owner_checker.html","title":"NFT持有人驗證","keywords":"","body":"NFT持有人驗證 動機 NFT功能是最為簡單直觀的，簡單來說只是要檢查某個地址是否擁有任何特定的NFT系列，有的話則顯示所以NFT收藏與資訊。 概念 驗證最基本的做法與鑄造和空投功能大同小異，首先一樣透過provider與智能合約進行交互，把要驗證的錢包地址與合約上目前的所有擁有者一一比對，最後如果有存在的話把所有擁有的系列回傳給API請求者，否則不存在的話回傳未擁有任何NFT的訊息。 架構 運作原理 邏輯圖 設計方法 一般的作法是透過provider調閱智能合約資訊，而更快的方法是直接透過Opensea API代為取得合約資訊，不過在這裡我們使用的是由迪球自家伺服器已經撰寫好的API來獲取NFT資訊。 使用的API端點為 \" /check \"，它會回傳一個Json物件，之中會包含當前錢包地址是否擁有NFT的詳細資訊。 組件說明 存在問題 "},"src/main_funciton/nft_owner_list.html":{"url":"src/main_funciton/nft_owner_list.html","title":"NFT持有人名單","keywords":"","body":"NFT持有人名單 動機 簡單來說，我們的目的是要把NFT目前所有持有人的名單，匯出成一個Excel檔案，以提供給抽獎或其他用途。 概念 最基本的做法與驗證功能大同小異，首先一樣透過provider與智能合約進行交互，取得所有NFT目前擁有者所有的地址後，彙整成一個總名單Json物件，最後再把這個Json物件做成一個Excel檔案匯出到前端網頁提供下載。 架構 運作原理 邏輯圖 設計方法 一般的作法是透過provider調閱智能合約資訊，而更快的方法是直接透過Opensea API代為取得合約資訊，不過在這裡我們使用的是由迪球自家伺服器已經撰寫好的API來獲取NFT資訊。 使用的API端點為 \" /owner \"，它會回傳一個Json物件，之中會包含當前所有擁有NFT的錢包地址。 Excel製作模組則使用第三方提供的自製模組來轉換成Excel名單。 此外為了方便調閱使用，還額外提供了個別NFT的擁有者名單。 組件說明 存在問題 "},"src/optional_function/":{"url":"src/optional_function/","title":"附加功能","keywords":"","body":"附加功能 解說架構 動機 概念 架構 組件說明 補充 "},"src/optional_function/double_confirm.html":{"url":"src/optional_function/double_confirm.html","title":"二次確認","keywords":"","body":"二次確認 "},"src/optional_function/security_verify.html":{"url":"src/optional_function/security_verify.html","title":"安全認證","keywords":"","body":"安全認證 "},"src/optional_function/trading_data.html":{"url":"src/optional_function/trading_data.html","title":"交易數據","keywords":"","body":"交易數據 "},"src/server_side_api/":{"url":"src/server_side_api/","title":"伺服器API","keywords":"","body":"伺服器API 解說架構 動機 概念 架構 API說明 API規格 補充 "},"src/server_side_api/otp_email_verify.html":{"url":"src/server_side_api/otp_email_verify.html","title":"OTP郵件認證","keywords":"","body":"OTP郵件認證 "},"src/server_side_api/all_nft_owner_list.html":{"url":"src/server_side_api/all_nft_owner_list.html","title":"總NFT持有人名單","keywords":"","body":"總NFT持有人名單 "},"src/conclusion/":{"url":"src/conclusion/","title":"結論","keywords":"","body":"結論 "},"src/conclusion/extension_problem.html":{"url":"src/conclusion/extension_problem.html","title":"延伸問題","keywords":"","body":"延伸問題 "},"src/conclusion/future.html":{"url":"src/conclusion/future.html","title":"未來規劃","keywords":"","body":"未來規劃 "},"src/references.html":{"url":"src/references.html","title":"參考資料與附件","keywords":"","body":"參考資料與附件 "}}